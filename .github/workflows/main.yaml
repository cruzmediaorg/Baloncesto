name: CI

on:
  push:

jobs:
  build-unit-testing:
    runs-on: self-hosted
    steps:
      - name: Descargar repositorio
        uses: actions/checkout@v3
      - name: Compilar la aplicación
        run: mvn package -DskipTests=true
      - name: Ejecutar pruebas unitarias
        run: |
         export SUPABASE_USERNAME="postgres.lrnonozwsarvuilbqvkd"
          export SUPABASE_PASSWORD="TvOgeJRNsUiCuUoJ"
          export SUPABASE_HOST="aws-0-eu-central-1.pooler.supabase.com"
          export SUPABASE_PORT="5432"
          export SUPABASE_DATABASE="postgres"
          mvn test

  tests-funcionales:
    needs: build-unit-testing
    runs-on: self-hosted
    steps:
      - name: Descargar repositorio
        uses: actions/checkout@v3
      - name: Instalar en Tomcat
        run: |
          mvn package -DskipTests=true
          cp -r target/Baloncesto /usr/local/tomcat/webapps
      - name: Preparar la BBDD para pruebas y arrancar Tomcat
        run: |
         export SUPABASE_USERNAME="postgres.lrnonozwsarvuilbqvkd"
          export SUPABASE_PASSWORD="TvOgeJRNsUiCuUoJ"
          export SUPABASE_HOST="aws-0-eu-central-1.pooler.supabase.com"
          export SUPABASE_PORT="5432"
          export SUPABASE_DATABASE="postgres"
          sh /usr/local/tomcat/bin/catalina.sh stop
          sh /usr/local/tomcat/bin/catalina.sh start
      - name: Realizar pruebas funcionales
        run: |
          mvn failsafe:integration-test failsafe:verify

  qa:
    needs: tests-funcionales
    runs-on: self-hosted
    continue-on-error: true
    steps:
      - name: SonarQube
        run: |
          mvn sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -Dsonar.qualitygate.wait=true -Dsonar.login=admin -Dsonar.password=admin
  
  deploy-testing-stage:
    runs-on: ubuntu-latest
    needs: qa
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'
    steps:
      - name: Descargar repositorio
        uses: actions/checkout@v3
      - name: Crear el archivo .war
      # Usamos supabase para la base de datos
        run: |
          export SUPABASE_USERNAME="postgres.lrnonozwsarvuilbqvkd"
          export SUPABASE_PASSWORD="TvOgeJRNsUiCuUoJ"
          export SUPABASE_HOST="aws-0-eu-central-1.pooler.supabase.com"
          export SUPABASE_PORT="5432"
          export SUPABASE_DATABASE="postgres"
          mvn package -DskipTests=true
      - name: Desplegar en entorno Testing en Azure
        uses: Azure/webapps-deploy@v2
        with:
          app-name: baloncesto-testing
          publish-profile: ${{ secrets.AZURE_TESTING }}
          package: target/*.war


  deploy-pre-stage:
    runs-on: ubuntu-latest
    needs: [qa,deploy-testing-stage]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Descargar repositorio
        uses: actions/checkout@v3
      - name: Crear el archivo .war
        run: |
          export SUPABASE_USERNAME="postgres.lrnonozwsarvuilbqvkd"
          export SUPABASE_PASSWORD="TvOgeJRNsUiCuUoJ"
          export SUPABASE_HOST="aws-0-eu-central-1.pooler.supabase.com"
          export SUPABASE_PORT="5432"
          export SUPABASE_DATABASE="postgres"
          mvn package -DskipTests=true
      - name: Desplegar en entorno Preproducción en Azure
        uses: Azure/webapps-deploy@v2
        with:
          app-name: baloncesto-pre
          publish-profile: ${{ secrets.AZURE_PRE }}
          package: target/*.war

  deploy-prod-stage:
    permissions: write-all
    runs-on: ubuntu-latest
    needs: [qa,deploy-pre-stage]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Descargar repositorio
        uses: actions/checkout@v3
      - name: Crear el archivo .war
        run: |
          export SUPABASE_USERNAME="postgres.lrnonozwsarvuilbqvkd"
          export SUPABASE_PASSWORD="TvOgeJRNsUiCuUoJ"
          export SUPABASE_HOST="aws-0-eu-central-1.pooler.supabase.com"
          export SUPABASE_PORT="5432"
          export SUPABASE_DATABASE="postgres"
          mvn package -DskipTests=true
      - name: Aprobación manual para despliegue en producción
        uses: trstringer/manual-approval@v1
        with:
         secret: ${{ github.TOKEN }}
         approvers: cruzmediaorg
         issue-title: "Aprobación para despliegue en producción"
         issue-body: "Por favor, aprueba este despliegue para producción"
         additional-approved-words: "UAHReady"
         additional-denied-words: "UAHNotReady"
      - name: Desplegar en producción en Azure
        uses: Azure/webapps-deploy@v2
        with:
          app-name: baloncesto-uah
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: target/*.war